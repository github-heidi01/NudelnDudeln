@page "/participants"
@page "/participants/update/{ParticipantId:int}"
@page "/participants/delete/{ParticipantId:int}"

@using NudelnDudeln.Data Data;
@using System.Collections.Generic;
@using System.Linq;
@inject NudelnDudeln.Data.AppDbContext AppDbContext
@inject NudelnDudeln.Data.EFCore.EfCoreParticipantRepository ParticipantRepo;
@inject NavigationManager NavManager;

<h3>Nudel Connaisseurs</h3>

<input type="text" @oninput="@FilterList" />

<div class="listContainer">
    <table>
        @foreach (var part in @FilteredItems)
        {
            <tr class="line">
                <td>
                    @part.Name
                </td>
                <td>
                    @part.CreatedOn.Date
                </td>
                <td>
                    <a class="clickable" @onclick="@(async () => await SaveDelete(@part.Id) )">DELETE</a>
                </td>
                <td>
                    <a class="clickable" @onclick="@(async () => Update(@part))">UPDATE</a>
                </td>
            </tr>
        }
    </table>
</div>


@if (@participantToChange != null)
{
    <EditForm Model="@participantToChange" OnValidSubmit="@(async () => await SaveUpdate(@participantToChange))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        Id: @participantToChange.Id
        <label>
            Name:
            <InputText id="name" @bind-Value="@participantToChange.Name" />
        </label>
        <button type="submit" class="action">Update</button>
    </EditForm>
}
else
{
    <EditForm Model="@participant" OnValidSubmit="@(async () => await CreateParticipant())">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label>
            Name:
            <InputText id="name" @bind-Value="@participant.Name" />
        </label>
        <button type="submit" class="action">Save</button>
    </EditForm>
}



@code {
    [Parameter]
    public int ParticipantId { get; set; }

    public readonly string[] action = new string[] { "update", "delete" };

    private Participant participant = new Participant();
    private Participant participantToChange = null;
    bool changeAction = false;
    private IEnumerable<Data.Participant> Items, FilteredItems = new List<Data.Participant>();
    


    protected void FilterList(ChangeEventArgs filter)
    {
        var filterBy = filter.Value.ToString().ToLower();
        FilteredItems = Items.Where(li => li.Name.ToLower().Contains(filterBy));
    }


    protected async Task  Load()
    {
        Items = await ParticipantRepo.GetAll();
        FilteredItems = Items;
    }


    protected override async void OnInitialized()
    {
        await Load();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected async Task CreateParticipant()
    {
        await Save();
        await Load();
    }

    protected async Task Save()
    {
        try
        {
            participant.CreatedOn = DateTime.Now;
            await ParticipantRepo.Add(participant);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }


    protected async Task SaveDelete(int _participant)
    {
        try
        {
            await ParticipantRepo.Delete(_participant);
            await Load();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    protected void Update(Participant _participant)
    {
        participantToChange = _participant;
    }

    protected async Task SaveUpdate(Participant _participant)
    {
        try
        {
            await ParticipantRepo.Update(_participant);
            await Load();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}