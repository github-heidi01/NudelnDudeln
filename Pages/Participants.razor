@page "/participants"
@page "/participants/update/{ParticipantId:int}"
@page "/participants/delete/{ParticipantId:int}"
@using NudelnDudeln.Models Models
@using System.Collections.Generic;
@using System.Linq;
@inject NudelnDudeln.Data.AppDbContext AppDbContext
@inject NavigationManager NavManager;

<h3>Nudel Connaisseurs</h3>

<input type="text" @oninput="@FilterList"/>

<div class="listContainer">
    <table>
        @foreach (var part in @FilteredParticipantList)
        {
        <tr class="line">
            <td>
                @part.Name
            </td>
            <td>
                @part.CreatedOn.Date
            </td>
            <td>
                <a class="clickable" @onclick="@(async () => await DeleteParticipant(part) )">DELETE</a>
            </td>
            <td>
                <a class="clickable" @onclick="@(async () => UpdateParticipant(part))">UPDATE</a>
            </td>
        </tr>
        }
    </table>
</div>


@if (@participantToChange != null)
{
    <EditForm Model="@participantToChange" OnValidSubmit="@(async () => await SaveUpdateParticipant())">
        <DataAnnotationsValidator />
        <ValidationSummary />

        Id: @participantToChange.Id
        <label>
            Name:
            <InputText id="name" @bind-Value="@participantToChange.Name" />
        </label>
        <button type="submit" class="action">Update</button>
    </EditForm>
}
else
{
    <EditForm Model="@participant" OnValidSubmit="@(async () => await CreateParticipant())">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label>
            Name:
            <InputText id="name" @bind-Value="@participant.Name" />
        </label>
        <button type="submit" class="action">Save</button>
    </EditForm>
}



@code {
    [Parameter]
    public int ParticipantId { get; set; }

    public readonly string[] action = new string[] { "update", "delete" };

    private Participant participant = new Participant();
    private Participant participantToChange = null;
    bool changeAction = false;
    private IEnumerable<Models.Participant> ParticipantList, FilteredParticipantList = new List<Models.Participant>();


    protected void FilterList(ChangeEventArgs filter)
    {
        var filterBy = filter.Value.ToString().ToLower();
        FilteredParticipantList = ParticipantList.Where(li => li.Name.ToLower().Contains(filterBy));
    }


    protected async Task Load()
    {
        IQueryable<Models.Participant> participantQuery = from p in AppDbContext.Participant
                                                          orderby p.Name ascending
                                                          select p;

        ParticipantList = participantQuery.ToList();
        FilteredParticipantList = ParticipantList;
    }


    protected override void OnInitialized()
    {
        Load();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected async Task CreateParticipant()
    {
        await SaveParticipant();
        await Load();
    }

    protected async Task SaveParticipant()
    {
        try
        {
            participant.CreatedOn = DateTime.Now;
            AppDbContext.Participant.Add(participant);
            await AppDbContext.SaveChangesAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }


    protected async Task DeleteParticipant(Participant _participant)
    {
        await SaveDeleteParticipant(_participant);
        await Load();
    }


    protected async Task SaveDeleteParticipant(Participant _participant)
    {
        try
        {
            AppDbContext.Participant.Remove(_participant);
            await AppDbContext.SaveChangesAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    protected void UpdateParticipant(Participant _participant)
    {
        participantToChange = _participant;
    }

    protected async Task SaveUpdateParticipant()
    {
        if (participantToChange == null)
        { }

        try
        {
            AppDbContext.Participant.Update(participantToChange);
            await AppDbContext.SaveChangesAsync();
            await Load();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}