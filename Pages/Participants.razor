@page "/participants"
@page "/participants/update/{ParticipantId:int}"
@page "/participants/delete/{ParticipantId:int}"
@using NudelnDudeln.Models Models
@using System.Collections.Generic;
@using System.Linq;
@inject NudelnDudeln.Data.AppDbContext AppDbContext
@inject NavigationManager NavManager;

<h3>Nudel Connaisseurs</h3>

<div>@NavManager.Uri.Split('/')[4]</div>

<div class="listContainer">
    <table>
        @foreach (var part in @FilteredParticipantList)
        {
            <tr class="line_@ToggleLine(lineToggle)">
                <td>
                    @part.Name
                </td>
                <td>
                    @part.CreatedOn.Date
                </td>
                <td>
                    <a class="clickable" href="" @onclick="@(async () => await DeleteParticipant(part.Id) )">DELETE</a>
                </td>
                <td>
                    <a class="clickable" href="" @onclick="@(async () => ForwardUpdateParticipant(part.Id))">UPDATE</a>
                </td>
            </tr>
        }
    </table>
</div>

@if (ParticipantId > 0 && GetUriFunction() == "update")
{
    <EditForm Model="@participantToUpdate" OnValidSubmit="@(async () => await SaveUpdateParticipant())">
        <DataAnnotationsValidator />
        <ValidationSummary />

        Id: @participantToUpdate.Id
        <label>
            Name:
            <InputText id="name" @bind-Value="@participantToUpdate.Name" />
        </label>
        <button type="submit" class="action">Update</button>
    </EditForm>
}
else
{
    <EditForm Model="@participant" OnValidSubmit="@(async () => await CreateParticipant())">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label>
            Name:
            <InputText id="name" @bind-Value="@participant.Name" />
        </label>
        <button type="submit" class="action">Save</button>
    </EditForm>
}



@code {
    [Parameter]
    public int ParticipantId { get; set; }

    public readonly string[] action = new string[] { "update", "delete" };

    private Participant participant = new Participant();
    private Participant participantToUpdate = new Participant();
    short lineToggle = 1;
    bool changeAction = false;
    private IEnumerable<Models.Participant> ParticipantList, FilteredParticipantList = new List<Models.Participant>();


    protected string GetUriFunction()
    {
        return @NavManager.Uri.Length > 4 ? @NavManager.Uri.Split('/')[4] : null;
    }


    protected void Load()
    {
        IQueryable<Models.Participant> participantQuery = from p in AppDbContext.Participant
                                                          orderby p.Name ascending
                                                          select p;

        ParticipantList = participantQuery.ToList();
        FilteredParticipantList = ParticipantList;
        UpdateParticipant(ParticipantId);
        if (GetUriFunction() == "delete")
        {
            // TODO: call delete on participant with id from url
        }

        if (participantToUpdate == null)
        { }

    }


    protected override void OnInitialized()
    {
        Load();
    }

    protected short ToggleLine(short toggle)
    {
        return (toggle == 0) ? 1 : toggle;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected async Task CreateParticipant()
    {
        await SaveParticipant();
        Load();
    }

    protected async Task SaveParticipant()
    {
        try
        {
            participant.CreatedOn = DateTime.Now;
            AppDbContext.Participant.Add(participant);
            await AppDbContext.SaveChangesAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }


    protected async Task DeleteParticipant(int _id)
    {
        await SaveDeleteParticipant(_id);

        Load();
        // NavManager.NavigateTo("/participants");
    }


    protected async Task SaveDeleteParticipant(int _id)
    {
        var toDelete = await AppDbContext.Participant.FindAsync(_id);
        if (toDelete == null)
        { }

        try
        {
            AppDbContext.Participant.Remove(toDelete);
            await AppDbContext.SaveChangesAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }


    protected void ForwardUpdateParticipant(int _id)
    {
        NavManager.NavigateTo(@NavManager.Uri.Split('/')[3] + "/update/" + _id.ToString());
    }

    // TODO: make the function more genralin order to support delete too
    protected void UpdateParticipant(int _id)
    {
        participantToUpdate = AppDbContext.Participant.Find(_id);
    }


    protected async Task SaveUpdateParticipant()
    {
        if (participantToUpdate == null)
        { }

        try
        {
            AppDbContext.Participant.Update(participantToUpdate);
            await AppDbContext.SaveChangesAsync();
            Load();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}